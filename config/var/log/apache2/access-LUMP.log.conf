################################################################################
# File: logscanner/config/var/log/apache2/access-LUMP.log.conf                 #
# Created:     Apr-14-25                                                       #
# Last update: Apr-14-25                                                       #
################################################################################
# This configuration file is used for "consolidation" of logfiles.             #
# Apache has a logfile for every site, so the LUMP label turns into a:         #
#                                                                              #
# ls /var/log/apache2/access-*.log                                             #
#                                                                              #
# Each logfile gets a dedicated reader thread which then writes lines into     #
# /var/log/apache2/access-LUMP.log.                                            #
#                                                                              #
# The /var/log/apache2/access-LUMP.log is read just like any other logfile.    #
# The format of the line written is:    {LOGFILE_NAME}\t{LOGFILE_LINE}         #
################################################################################

# Do not begin or end regexps with (").  It breaks (some) SQL inserts.

# Information to extract date from log line:
# std::string line = "/var/log/apache2/access-kitepilot.info.log	43.159.144.16 - - [20/Apr/2025:23:07:56 -0400] \"GET /?C=N;O=A HTTP/1.1\" 200 778 \"-\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1\"";

# Regexp to extract date:
# std::string regxFmt = ".*\[([[:digit:]]{2})/([[:alpha:]]{3})/([[:digit:]]{4}):([[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2})[[:space:]].*";
R	.*\[([[:digit:]]{2})/([[:alpha:]]{3})/([[:digit:]]{4}):([[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2})[[:space:]].*
# std::vector<char> buildMap{3, '-', 2, '-', 1, ' ', 4};
# Only ONE character between commas!
M	3,-,2,-,1, ,4
# std::string format = "%Y-%b-%d %H:%M:%S";
F	%Y-%b-%d %H:%M:%S

# Regexps to select bad boys:
# severity-val	regexp
0	GET /alive\.php .*HTTP.*
0	GET .*\.git.*
1	GET /.*\.php.*[[:digit:]]\.[[:digit:]]
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.7z HTTP.*
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.gz HTTP.*
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.rar HTTP.*
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.tar.gz HTTP.*
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.tar HTTP.*
#0	GET /[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.zip HTTP.*
#0	GET /dns-query.dns=.* HTTP.*
#0	GET / HTTP.*" [[:digit:]]{1,} [[:digit:]]{1,} "-
#0	GET /logon/LogonPoint/.*html HTTP.*
#0	GET /OdinHttpCall-* HTTP.*
#0	GET /.*phpinfo HTTP/[[:digit:]]\.[[:digit:]]
#0	GET /raiza.html HTTP.*
#0	GET /remote/login HTTP.*" [[:digit:]]{1,} [[:digit:]]{1,} "-
#0	GET /shell.* HTTP.*
#0	POST /.*/Ajax/.* HTTP.*
#0	POST /boaform/admin/formLogin HTTP.*
#0	POST /webadm.* HTTP.*" 
#0	\x16\x03\x01" [[:digit:]]{1,} [[:digit:]]{1,} "-" "-
#*END*#
